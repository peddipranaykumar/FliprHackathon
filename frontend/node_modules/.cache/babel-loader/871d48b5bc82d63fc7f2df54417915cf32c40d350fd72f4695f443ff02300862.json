{"ast":null,"code":"var _jsxFileName = \"D:\\\\Flipr\\\\frontend\\\\src\\\\components\\\\ViewPodcast\\\\ViewPodcast.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ViewPodcast = () => {\n  _s();\n  const [podcasts, setPodcasts] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      let pod = window.location.pathname.split('/')[1];\n      let result = await axios.get(`http://localhost:5000/podcast/${pod}`);\n      console.log(result);\n      if (result.data.message === \"No podcasts found\") {\n        setPodcasts(null);\n      } else setPodcasts(result.data.podcasts);\n    };\n    fetchData();\n  }, []);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isMuted, setIsMuted] = useState(false);\n  const videoRef = useRef(null);\n  const handlePlayPause = () => {\n    if (isPlaying) {\n      videoRef.current.pause();\n    } else {\n      videoRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleMuteUnmute = () => {\n    videoRef.current.muted = !isMuted;\n    setIsMuted(!isMuted);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: podcasts ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: podcasts.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), podcasts.type === \"video\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"embed\", {\n          ref: videoRef,\n          src: podcasts.file,\n          type: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 15\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: podcasts.file,\n          type: \"audio/mpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No podcasts found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(ViewPodcast, \"C2DnLMcQC+1J/s7futLUKiF68L0=\");\n_c = ViewPodcast;\nexport default ViewPodcast;\nvar _c;\n$RefreshReg$(_c, \"ViewPodcast\");","map":{"version":3,"names":["axios","React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ViewPodcast","_s","podcasts","setPodcasts","fetchData","pod","window","location","pathname","split","result","get","console","log","data","message","isPlaying","setIsPlaying","isMuted","setIsMuted","videoRef","useRef","handlePlayPause","current","pause","play","handleMuteUnmute","muted","children","name","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","src","file","controls","_c","$RefreshReg$"],"sources":["D:/Flipr/frontend/src/components/ViewPodcast/ViewPodcast.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n\r\n\r\nconst ViewPodcast = () => {\r\n\r\n\r\n  const [podcasts, setPodcasts] = useState([]);\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let pod = (window.location.pathname.split('/')[1])\r\n      let result = await axios.get(`http://localhost:5000/podcast/${pod}`)\r\n      console.log(result);\r\n      if (result.data.message === \"No podcasts found\") {\r\n        setPodcasts(null)\r\n      }\r\n      else\r\n        setPodcasts(result.data.podcasts)\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isMuted, setIsMuted] = useState(false);\r\n  const videoRef = useRef(null);\r\n\r\n\r\n  const handlePlayPause = () => {\r\n    if (isPlaying) {\r\n      videoRef.current.pause();\r\n    } else {\r\n      videoRef.current.play();\r\n    }\r\n    setIsPlaying(!isPlaying);\r\n  };\r\n\r\n  const handleMuteUnmute = () => {\r\n    videoRef.current.muted = !isMuted;\r\n    setIsMuted(!isMuted);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      {podcasts ? (\r\n        <>\r\n          <h1>{podcasts.name}</h1>\r\n          {podcasts.type === \"video\" ? (\r\n            <>\r\n              <embed ref={videoRef} src={podcasts.file} type=\"\" />\r\n            </>\r\n          ) : (\r\n            <audio controls>\r\n              <source src={podcasts.file} type=\"audio/mpeg\" />\r\n            </audio>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <div>No podcasts found</div>\r\n      )}\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default ViewPodcast"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}